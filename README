Реализация Binding
indexesOf
Необходимо реализовать функцию расширения (String.kt) возаращающую список индексов вхождения подстроки аргумента в исходную строку

Реализуй функцию расширения fun String.indexesOf(substr: String, ignoreCase: Boolean = true): List, в качестве аргумента принимает подстроку и флаг - учитывать или нет регистр подстроки при поиске по исходной строке. Возвращает список позиций вхождений подстроки в исходную строку. Пример: "lorem ipsum sum".indexesOf("sum") // [8, 12]

setMarginOptionally
Необходимо реализовать функцию расширения (View.kt) добавляющую внешний отступ для View

Реализуй функцию расширения View.setMarginOptionally(left:Int = marginLeft, top : Int = marginTop, right : Int = marginRight, bottom : Int = marginBottom), в качестве аргумента принимает значения внешних отступов View (margin) в пикселях

AttrValue
Необходимо реализовать делегат для свойства AttrValue возвращающий значение указанного атрибута темы

Реализуй делегат AttrValue(@AttrRes private val res:Int) : ReadOnlyProperty возвращающий значение атрибута темы по идентификатору атрибута переданного в качестве аргумента. Важно: RootActivity должно содержать два свойства bgColor и fgColor как делегируемые свойства AttrValue и свойства должны быть видимыми для тестов.Пример:@VisibleForTesting(otherwise = VisibleForTesting.PRIVATE) val bgColor by AttrValue(R.attr.colorSecondary) @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE) val fgColor by AttrValue(R.attr.colorOnSecondary)

Binding
Необходимо реализовать привязку данных получаемых от ArticleViewModel к View (activity_root, layout_bottombar, layout_submenu). Привязку данных осуществить через свойства Binding

Реализуй пользовательские делегаты: RenderPropObserveProp для привязки изменяемых значений к View. Для этого необходимо реализовать inner class ArticleBinding : Binding() и объявить его как поле класса RootActivity видимое для тестирования (ленивая инициализация)Пример: @VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) public override val binding: ArticleBinding by lazy { ArticleBinding() }

IArticleView
Необходимо реализовать методы интерфейса IArticleView

Реализуй методы интерфейса IArticleView fun renderSearchResult(searchResult: List - отрисовка вхождений поискового запрос в контент fun renderSearchPosition(searchPosition: Int) - отрисовка и перевод фокуса на текущюю позицию поиска fun clearSearchResult() - очистка результатов поиска fun showSearchBar() - отображение панели поиска fun hideSearchBar() - скрытие панели поиска

*ViewModelProvide
Необходимо реализовать делегат для свойства viewModel возвращающий ViewModel с указанными аргументами (ru.skillbranch.skillarticles.viewmodels.base.ViewModelDelegate)

Реализуй делегат ViewModelDelegate<T : ViewModel>(private val clazz: Class<T>, private val arg: Any?) :  ReadOnlyProperty<FragmentActivity, T>  реализующий получение экземляра BaseViewModel соответствующего типа <T> с аргументами переданными вторым аргументом конструктора.
Пример:
val viewModel : TestViewModel by provideViewModel("test args")

Реализуй в классе BaseActivity инлайн функцию
internal inline fun provideViewModel(arg : Any?) : ViewModelDelegate - возвращающую экземпляр делегата ViewModelDelegate

**PrefDelegate
Необходимо реализовать делегат для получения значений примитивов (Boolean, String, Float, Int, Long) из SharedPreferences

Реализуй делегат PrefDelegate<T>(private val defaultValue: T) : ReadWriteProperty<PrefManager, T?> (ru.skillbranch.skillarticles.data.delegates.PrefDelegate) возвращающий значений примитивов (Boolean, String, Float, Int, Long)

Пример: var storedBoolean by PrefDelegate(false)
var storedString by PrefDelegate("")
var storedFloat by PrefDelegate(0f)
var storedInt by PrefDelegate(0)
var storedLong by PrefDelegate(0)

Реализуй в классе PrefManager(context:Context) (ru.skillbranch.skillarticles.data.local.PrefManager)
свойство val preferences : SharedPreferences проинициализированое экземпляром SharedPreferences приложения. 
И метод fun clearAll() - очищающий все сохраненные значения SharedPreferences приложения.
Использовать PrefManager из androidx (import androidx.preference.PreferenceManager)
